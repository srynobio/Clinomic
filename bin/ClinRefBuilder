#!/usr/bin/perl
use warnings;
use strict;
use IO::File;
use Parallel::ForkManager;

BEGIN {
  unless ( -d '../data' ) {
      `mkdir ../data`;
  }
  `mkdir ../data/GFF`;
  `mkdir ../data/dbSNP`;
  `mkdir ../data/ClinVar`;
  `mkdir ../data/NCBI`;
  `mkdir ../data/GTF`;
}

my $gff = sub {
  print "{ClinIndex} Downloading and unpacking GFF file.\n";
  `wget ftp://ftp.ncbi.nlm.nih.gov/genomes/H_sapiens/GFF/ref_GRCh37*level.gff3.gz`;
  `mv ref_GRCh37*level.gff3.gz ref_GRCh37.gff3.gz`;
  print "{ClinIndex} Unzipping GFF file\n";
  `gunzip ref_GRCh37.gff3.gz`;
  print "{ClinIndex} creating GFF index file of only gene models.\n";
  updateGFF();
  `bgzip -c Updated.ref_GRCh37.gff3 > Updated.ref_GRCh37.gff3.gz`;
  `tabix -s1 -b4 -e5 Updated.ref_GRCh37.gff3.gz`;
  `rm ref_GRCh37.gff3 Updated.ref_GRCh37.gff3`;
  `mv Updated.ref_GRCh37.gff3.gz* ../data/GFF`;
};

my $gtf = sub {
  `wget ftp://ftp.ensembl.org/pub/release-69/gtf/homo_sapiens/Homo_sapiens.GRCh37.69.gtf.gz`;
  `gunzip Homo_sapiens.GRCh37.69.gtf.gz`;
  `grep -P '^(\d+)|^X|^Y' Homo_sapiens.GRCh37.69.gtf > Homo_sapiens.gtf`;
  `sort -k1,1 -k4,4n Homo_sapiens.gtf | bgzip -c > Homo_sapiens.gtf.gz`,
  `tabix Homo_sapiens.gtf.gz`,
  `mv Homo_sapiens.* ../data/GTF/`;
};

my $dbsnp = sub {
  print "{ClinIndex} Downloading and unpacking dbSNP file.\n";
  `wget ftp://ftp.ncbi.nlm.nih.gov/snp/organisms/human_9606/VCF/00-All.vcf.gz`;
  print "{ClinIndex} Unzipping dbSNP file\n";
  `gunzip 00-All.vcf.gz`;
  print "{ClinIndex} Updating dbSNP file.\n";
  updateSNP();
  print "{ClinIndex} Indexing dbSNP file.\n";
  `bgzip -c Updated.00-All.vcf > Updated.00-All.vcf.gz`;
  `tabix -s1 -b2 -e2 Updated.00-All.vcf.gz`;
  `rm 00-All.vcf Updated.00-All.vcf`;
  `mv Updated.00-All.vcf.gz* ../data/dbSNP`;
};

my $clinvar = sub {
  print "{ClinIndex} Downloading ClinVar files.\n";
  `wget ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf/clinvar_00-latest.vcf.gz`;
  `mv clinvar_*.vcf.gz clinvar_sigfile.vcf.gz`;
  `gunzip clinvar_sigfile.vcf.gz`;
  `grep -v '^#' clinvar_sigfile.vcf > clinvar_sig.vcf`;
  `bgzip -c clinvar_sig.vcf > clinvar_sig.vcf.gz`;
  `tabix -s1 -b2 -e2 clinvar_sig.vcf.gz`;
  `mv clinvar_sig.vcf* ../data/ClinVar/`;
  `rm clinvar_sigfile.vcf`;
};

my $ncbi = sub {
  print "{ClinIndex} Downloading and NCBI files.\n";
  `wget ftp://ftp.ncbi.nih.gov/gene/DATA/gene_info.gz`;
  `wget ftp://ftp.ncbi.nih.gov/gene/DATA/gene2refseq.gz`;
  print "{ClinIndex} Unzipping NCBI files.\n";
  system("gunzip gene_info.gz");
  system("gunzip gene2refseq.gz");
};

my @ftp_sites = ($gff, $dbsnp, $clinvar, $ncbi, $gtf);

# set up the parallel manager
my $pm = Parallel::ForkManager->new(10);

foreach my $sub (@ftp_sites){
  $pm->start and next;
  $sub->();
  $pm->finish;
}
$pm->wait_all_children;

## finish, and clean up.
# before moving make needed file changes.
print "{ClinIndex} Converting NCBI files to work with Clinomic.\n";
system("grep -P '^9606' gene_info > gene_info9606");
system(q/grep -P '^9606' gene_info |awk -F '\t' '{print $2 "\t" $3 }' > 00id+symbol/);
system(q/grep -P '^9606' gene2refseq >01humanid/);

# sub to make needed switch to file
symbolSwitch();
`mv UpdatedRefSeq.txt gene_info9606 gene2refseq ../data/NCBI`;
`rm 00id+symbol 01humanid gene_info`;

print "{ClinIndex} finished\n";

##------------------------------------------------------------------------------
##----------------------------- SUBS -------------------------------------------
##------------------------------------------------------------------------------

sub symbolSwitch {

    my $geneFH = IO::File->new( 'gene_info9606', 'r' )
      || die "Can't open gene_info file\n";
    my $idFH = IO::File->new( '01humanid', 'r' )
      || die "Can't open 01humanid file\n";
    my $outFH = IO::File->new( 'UpdatedRefSeq.txt', 'w' )
      || die "Can't make write file??\n";

    my %sym;
    foreach my $i (<$geneFH>) {
        chomp $i;

        my @columns = split /\t/, $i;
        $sym{ $columns[1] } = $columns[2];
    }

    foreach my $t (<$idFH>) {
        chomp $t;

        my @items = split /\t/, $t;

        if ( $sym{ $items[1] } ) {
            $items[1] = $sym{ $items[1] };
        }

        my $refseq = join( "\t", @items );
        print $outFH $refseq, "\n";
    }
    $geneFH->close;
    $idFH->close;
    $outFH->close;
}
##------------------------------------------------------------------------------

sub updateGFF {

    my $inFH = IO::File->new( 'ref_GRCh37.gff3', 'r' )
      || die "please enter ref file\n";
    my $outFH = IO::File->new( 'Updated.ref_GRCh37.gff3', 'w' )
      || die "Can't create Update.ref.model file\n";

    foreach (<$inFH>) {
        chomp $_;

        if ( $_ !~ /^NC_/ ) { next }
        if ( $_ =~ /region/ ) { next }

        #taking out mito atm
        if ( $_ =~ /^NC_012920.1/ ) { next }

        $_ =~ s/^NC_(0){5,5}(\d)\.(\d+)\t(.*)$/chr$2\t$4/g;
        $_ =~ s/^NC_(0){4,4}(\d+)\.(\d+)\t(.*)$/chr$2\t$4/g;

        my @genes = grep { $_ =~ /\tgene\t/ } $_;
        foreach (@genes) {
            print $outFH $_, "\n";
        }
    }
    $outFH->close;
}
##------------------------------------------------------------------------------

sub updateSNP {

    my $inFH = IO::File->new( '00-All.vcf', 'r' )
      || die "Please enter dbSNP file\n";
    my $outFH = IO::File->new( 'Updated.00-All.vcf', 'w' )
      || die "Can't create Update.00-All.vcf file\n";

    foreach (<$inFH>) {
        chomp $_;

        if ( $_ =~ /^#{1,}/ ) { next }
        $_ =~ s/^/chr/;

        print $outFH $_, "\n";
    }
}
##------------------------------------------------------------------------------
